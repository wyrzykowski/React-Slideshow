{"version":3,"sources":["components/slideshow.jsx","App.js","serviceWorker.js","index.js"],"names":["Slideshow","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentImageHeight","currentImageWidth","screenWidth","window","innerWidth","style","content","slideIndex","first","interval","speed","slides","slide","opacity","className","updateDimensions","setState","setTimer","img","Image","src","onload","getImageHeight","height","width","setInterval","plusSlides","image","React","createRef","addEventListener","removeEventListener","n","moveSlide","i","current","next","moveSlideAnimClass","forCurrent","forNext","length","update","defineProperty","$set","concat","_this2","react_default","a","createElement","margin","padding","map","key","animationDuration","ref","Component","App","slideshow","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85bd40c9.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport update from 'immutability-helper';\r\n\r\nclass Slideshow extends Component {\r\n\r\n    state = {\r\n        currentImageHeight:1,\r\n        currentImageWidth:1,\r\n        screenWidth: window.innerWidth,\r\n        style:{},\r\n        content:[],\r\n        slideIndex:0,\r\n        first:true,\r\n        interval:3000,\r\n        speed:'0.6s',\r\n        slides : [\r\n            {\r\n                slide:'./images/1.jpg',\r\n                style:{opacity:'0'},\r\n                className:\"imageHolder\"\r\n            },\r\n            {\r\n                slide:'./images/2.jpg',\r\n                style:{opacity:'0'},\r\n                className:\"imageHolder\"\r\n            },\r\n            {\r\n                slide:'./images/3.jpg',\r\n                style:{opacity:'0'},\r\n                className:\"imageHolder\"\r\n            },\r\n            {\r\n                slide:'./images/4.jpg',\r\n                style:{opacity:'0'},\r\n                className:\"imageHolder\"\r\n            }\r\n        ]\r\n    }\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.image = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        //To set new window.innerWidth when user resize window\r\n        window.addEventListener(\"resize\", this.updateDimensions);\r\n        //Run initialization of slider (When got data)\r\n        this.setTimer();\r\n    }\r\n\r\n    //To set new window.innerWidth when user resize window\r\n    updateDimensions=() => {\r\n        var screenWidth = window.innerWidth;\r\n        this.setState({screenWidth});\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateDimensions);\r\n    }\r\n\r\n//Slider methods\r\n    plusSlides(n){ //n actual slide\r\n        this.moveSlide(this.state.slideIndex+n);\r\n    }\r\n\r\n    moveSlide(n){\r\n        var i;\r\n        var current,next;\r\n        var moveSlideAnimClass={\r\n            forCurrent:\"\",\r\n            forNext:\"\"\r\n        };\r\n\r\n        if(n>this.state.slideIndex) {\r\n            if(n >= this.state.slides.length){n=0;}//if it's the last image+1\r\n            moveSlideAnimClass.forCurrent=\"moveLeftCurrentSlide\";\r\n            moveSlideAnimClass.forNext=\"moveLeftNextSlide\";\r\n        }\r\n\r\n        if(n!=this.state.slideIndex){\r\n            next = n;\r\n            current=this.state.slideIndex;\r\n            for (i = 0; i < this.state.slides.length; i++) {\r\n                this.setState({\r\n                    slides: update(this.state.slides,{[i]:{style:{$set:{opacity:\"0\"}},className:{$set:\"imageHolder\"}}})\r\n                })\r\n            }\r\n            this.setState({\r\n                slides: update(this.state.slides,{[current]:{ className:{$set:`${this.state.slides[current].className}  ${moveSlideAnimClass.forCurrent}` }}}),\r\n                slideIndex: n\r\n            })\r\n            this.setState({\r\n                slides: update(this.state.slides,{[next]:{ className:{$set:`${this.state.slides[next].className} \" ${moveSlideAnimClass.forNext}` }}}),\r\n                first:false\r\n            })\r\n        }\r\n\r\n    }\r\n//Initial slide_show\r\n    setTimer=()=>{\r\n        var img = new Image(); // Get width and height of original image\r\n        img.src = this.state.slides[0].slide;// assume every image have same size\r\n        var getImageHeight=(currentImageHeight,currentImageWidth)=>{\r\n            this.setState({currentImageHeight,currentImageWidth})\r\n        }\r\n        img.onload =function(){\r\n            const currentImageHeight=this.height;\r\n            const currentImageWidth=this.width;\r\n            getImageHeight(currentImageHeight,currentImageWidth);\r\n        }\r\n        //set time between slide change\r\n        var timer = setInterval(()=>{\r\n            this.plusSlides(1);\r\n        },this.state.interval)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"galleryContainer\"  style={ {width:\"100%\",height:(this.state.screenWidth/this.state.currentImageWidth)*this.state.currentImageHeight,margin:0,padding:0}}>\r\n                {this.state.slides ?\r\n                    <div className=\"slideShowContainer\" >\r\n                        {\r\n                            this.state.slides.map((slide) =>\r\n                                <div key={slide.slide} className={`${slide.className}`}\r\n                                     style={slide===this.state.slides[0] ? { opacity: 1,animationDuration:this.state.speed}  : { opacity: 0,animationDuration:this.state.speed }}>\r\n                                    <img ref={this.image} src={slide.slide} />\r\n                                </div>\r\n                            )\r\n                        }\r\n                    </div>\r\n                    : ''\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Slideshow;","import React, { Component } from 'react';\nimport Slideshow from './components/slideshow'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Slideshow/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}